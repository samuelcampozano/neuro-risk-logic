version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: neurorisk_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-neurorisk_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-neurorisk_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - neurorisk_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-neurorisk_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: neurorisk_api
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - POSTGRES_HOST=db
      - PYTHONPATH=/app
    ports:
      - "${APP_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
    networks:
      - neurorisk_network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        sleep 5 &&
        python -m alembic upgrade head &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 2
      "

  retraining:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.retraining
    container_name: neurorisk_retraining
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - POSTGRES_HOST=db
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
    networks:
      - neurorisk_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: neurorisk_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - neurorisk_network
    restart: unless-stopped

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: neurorisk_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - neurorisk_network
    restart: unless-stopped

  # Optional: PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: neurorisk_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@neurorisk.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - neurorisk_network
    restart: unless-stopped

volumes:
  postgres_data:
  prometheus_data:

networks:
  neurorisk_network:
    driver: bridge